name: Build and Deploy .NET App to AWS EC2

on:
  push:
    branches:
      - feature-rollback-deployment

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: stag  

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      BOOK_JSON: ${{ secrets.BOOK_JSON }}
      PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0'

    # - name: Get the currently running image
    #   id: fetch-current-image
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.EC2_HOST }}
    #     username: ${{ secrets.EC2_USERNAME }}
    #     key: ${{ secrets.AWS_PRIVATE_KEY }}
    #     port: ${{ secrets.SSH_PORT }}
    #     script: |
    #       # Extract the current image from the .env file
    #       CURRENT_IMAGE=$(grep 'Bookstore_IMAGE_DEV=' /home/${{ secrets.EC2_USERNAME }}/Bookstore/.env | cut -d '=' -f2)
    #       if [ -z "$CURRENT_IMAGE" ]; then
    #       echo "Failed to find the current image. Please check the .env file."
    #       else
    #       echo "Current image is: $CURRENT_IMAGE"
    #       echo "::set-output name=current_image::$CURRENT_IMAGE"
    #       fi
    #       echo "$CURRENT_IMAGE" > /home/${{ secrets.EC2_USERNAME }}/Bookstore/current_image.txt

    
      

    - name: Build Docker image
      id: be-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $DOCKER_USERNAME/bookstore-be:$IMAGE_TAG --label project=QnA_bot .
        echo "IMAGE_NAME=$DOCKER_USERNAME/bookstore-be:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Log in to Docker Hub
      run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

    - name: Push Docker image to Docker Hub
      run: docker push ${{ env.IMAGE_NAME }}


    - name: Create var.env file from BOOK_JSON
      run: |
         echo '${{ env.BOOK_JSON }}' > config.json
         jq -r 'to_entries | map("\(.key)=\(.value | tojson | gsub("\\\""; ""))") | .[]' config.json > var.env
  

    - name: Copy Updated Docker Compose File to VM
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        overwrite: true
        source: ./docker-compose.yaml
        target: /home/${{ secrets.EC2_USERNAME }}/Bookstore

    - name: Copy Updated var.env File to VM
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        overwrite: true
        source: var.env
        target: /home/${{ secrets.EC2_USERNAME }}/Bookstore

    - name: SSH into EC2 instance and deploy new container
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          cd Bookstore/
          # Update the image in the .env file
          echo "Bookstore_IMAGE_DEV=old_value" > .env
          sed -i 's#Bookstore_IMAGE_DEV=.*#Bookstore_IMAGE_DEV=${{ env.IMAGE_NAME }}#' .env
          # Deploy new version
          sudo docker-compose down
          sudo docker-compose up -d --build
          sudo docker system prune -f --filter "label=project=QnA_bot"


    - name: Check application health
      id: health-check
      run: |
        
        for i in {1..3}; do
           response=$(curl -s -o /dev/null -w "%{http_code}" "https://google.com")
           echo "Attempt $i: Response code: $response"

           #  Set the status output to the response code
           echo "::set-output name=status::$response"

           # If the status is one of the success codes, break out of the loop
           if [[ "$response" == "200" || "$response" == "201" || "$response" == "202" ]]; then
             echo "Application is healthy."
             break
           fi

           # Wait for 5 seconds before the next attempt if it's not successful
           sleep 5
        done

    - name: Rollback if health check fails
      if: steps.health-check.outputs.status != '301'
      uses: appleboy/ssh-action@master
      with:
         host: ${{ secrets.EC2_HOST }}
         username: ${{ secrets.EC2_USERNAME }}
         key: ${{ secrets.AWS_PRIVATE_KEY }}
         port: ${{ secrets.SSH_PORT }}
         script: |
          cd Bookstore/
          # Revert to the previous image
          CURRENT_IMAGE=$(cat current_image.txt)
          sed -i "s#Bookstore_IMAGE_DEV=.*#Bookstore_IMAGE_DEV=$CURRENT_IMAGE #" .env

          # Rollback deployment
          sudo docker-compose down
          sudo docker-compose up -d --build
          sudo docker prune -f --filter "label=project=QnA_bot"


    - name: Rollback if deployment fails
      if: failure()  # This triggers on any step failure
      uses: appleboy/ssh-action@master
      with:
         host: ${{ secrets.EC2_HOST }}
         username: ${{ secrets.EC2_USERNAME }}
         key: ${{ secrets.AWS_PRIVATE_KEY }}
         port: ${{ secrets.SSH_PORT }}
         script: |
          cd Bookstore/
          # Revert to the previous image
          CURRENT_IMAGE=$(cat current_image.txt)
          sed -i "s#Bookstore_IMAGE_DEV=.*#Bookstore_IMAGE_DEV=$CURRENT_IMAGE #" .env

          # Rollback deployment
          sudo docker-compose down
          sudo docker-compose up -d --build

    - name: Send success email notification
      # if: steps.health-check.outputs.status == '301' || steps.health-check.outputs.status == '201' || steps.health-check.outputs.status == '202'
      if: success()
      uses: dawidd6/action-send-mail@v2
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_APP_PASSWORD }}
        subject: '${{ github.job }} job of ${{ github.repository }} has succeeded'
        body: '${{ github.job }} job in workflow ${{ github.workflow }} of ${{ github.repository }} has succeeded!'
        to: pankajkumarnikk@gmail.com
        from: sunny

    - name: Send failure email notification
      if: failure() || (steps.health-check.outputs.status != '301' && steps.health-check.outputs.status != '201' && steps.health-check.outputs.status != '202')
      uses: dawidd6/action-send-mail@v2
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_APP_PASSWORD }}
        subject: 'QnA bot Deployment status'
        body: 'Deployment  has failed'
        to: pankajkumarnikk@gmail.com
        from: sunny
