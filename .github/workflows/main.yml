name: Build and Deploy .NET App to AWS EC2

on:
  push:
    branches:
      - feature-rollback

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: stag  
    
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      BOOK_JSON: ${{ secrets.BOOK_JSON }} # Accessing the environment-specific variable
      PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0' 
      

    - name: Build Docker image
      id: be-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t bookstore-be:$IMAGE_TAG --label project=BOOKSTORE-BE .
        echo "IMAGE_NAME=bookstore-be:$IMAGE_TAG" >> $GITHUB_ENV # Store the image name in GitHub environment
        
    - name: Create var.env file from BOOK_JSON
      run: |
        # Convert JSON to .env format
        echo "$BOOK_JSON" | jq -r '
          .ConnectionStrings.DefaultConnection as $conn |
          .Urls as $url |
          "CONNECTIONSTRINGS__DEFAULTCONNECTION=\($conn)\nURLS=\($url)"
        ' > var.env
        
    # - name: Copy .env File to VM
    #   uses: appleboy/scp-action@v0.1.4
    #   with:
    #     host: ${{ secrets.EC2_HOST }}
    #     username: ${{ secrets.EC2_USERNAME }}
    #     key: ${{ secrets.AWS_PRIVATE_KEY }}
    #     port: ${{ secrets.SSH_PORT }}
    #     overwrite: true
    #     source: .env
    #     target: /home/${{ secrets.EC2_USERNAME }}/.env

    - name: Copy Updated Docker Compose File to  VM
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        overwrite: true
        source: ./docker-compose.yaml
        target: /home/${{ secrets.EC2_USERNAME }}/docker-compose.yaml

    - name: Copy Updated image env File to  VM
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        overwrite: true
        source: var.env
        target: /home/${{ secrets.EC2_USERNAME }}/var.env

    - name: SSH into EC2 instance and deploy container
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          touch .env
          sed -i 's#Bookstore_IMAGE_DEV=.*#Bookstore_IMAGE_DEV=${{ steps.be-image.outputs.IMAGE_NAME }}#' .env


    #       # Pull the latest Docker image
    #       docker pull "${{ secrets.DOCKER_USERNAME }}/dotnet-app:latest"

    #       # Stop and remove the existing container if it exists
    #       if [ $(docker ps -q -f name=dotnet-app) ]; then
    #         echo "Stopping the existing container"
    #         docker stop dotnet-app
    #         docker rm dotnet-app
    #       fi
          
    #       # Run the new container
    #       docker run --env-file /home/${{ secrets.EC2_USERNAME }}/.env -p 8080:8080 -d --name dotnet-app "${{ secrets.DOCKER_USERNAME }}/dotnet-app:latest"

    #       # Remove .env file after deployment
    #       rm /home/${{ secrets.EC2_USERNAME }}/.env

    #       # Prune all unused Docker resources for this project
    #       docker system prune -f --filter "label=project=dotnet-app"

    # - name: Send failure notification
    #   if: failure()
    #   uses: dawidd6/action-send-mail@v2
    #   with:
    #     server_address: smtp.gmail.com
    #     server_port: 465
    #     username: ${{ secrets.EMAIL_USERNAME }}  # Your actual email address
    #     password: ${{ secrets.EMAIL_APP_PASSWORD }}  # Use App Password here (not actual password )
    #     subject: '${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}'
    #     body: '${{ github.job }} job in workflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}'
    #     to: pankajkumarnikk@gmail.com
    #     from: sunny  # Your name or the name you'd like to show      
   
    # - name: Check application health
    #   id: health-check
    #   run: |
    #     response=$(curl -s -o /dev/null -w "%{http_code}" https://google.com)
    #     echo "Response code: $response"
    #     echo "::set-output name=status::$response"

    # - name: Send success email notification
    #   if: steps.health-check.outputs.status == '301'
    #   uses: dawidd6/action-send-mail@v2
    #   with:
    #     server_address: smtp.gmail.com
    #     server_port: 465
    #     username: ${{ secrets.EMAIL_USERNAME }}  # Your actual email address
    #     password: ${{ secrets.EMAIL_APP_PASSWORD }}  # Use App Password here
    #     subject: '${{ github.job }} job of ${{ github.repository }} has succeeded'
    #     body: '${{ github.job }} job in workflow ${{ github.workflow }} of ${{ github.repository }} has succeeded!'
    #     to: pankajkumarnikk@gmail.com
    #     from: sunny  