name: Build and Deploy .NET App to AWS EC2

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev  # Replace 'production' with your GitHub Environment name
    
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      ENV_JSON: ${{ vars.ENV_JSON }} # Accessing the environment-specific variable
      PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0' # Specify your .NET version

    - name: Build .NET project
      run: dotnet build

    - name: Build Docker image
      run: |
        docker build -t $DOCKER_USERNAME/dotnet-app:latest .

    - name: Log in to Docker Hub
      run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

    - name: Push Docker image to Docker Hub
      run: docker push $DOCKER_USERNAME/dotnet-app:latest

    - name: Create .env file from ENV_JSON
      run: |
       # Print the ENV_JSON content to debug
        echo "Fetching ENV_JSON from environment..."
        echo "ENV_JSON content: $ENV_JSON"

        # Convert JSON to .env format
        echo "$ENV_JSON" | jq -r 'to_entries | map("\(.key)=\(.value|tostring)") | .[]' > .env
        
        # Verify the .env content
        echo "Content of .env file:"
        cat .env
        echo "Copying .env file to EC2 instance..."
        echo "$PRIVATE_KEY" > github-ec2.pem && chmod 600 github-ec2.pem
        scp -o StrictHostKeyChecking=no -i github-ec2.pem .env ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/.env
    - name: AWS login
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: SSH into EC2 instance and deploy container
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          scp .env ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/.env
          docker pull "${{ secrets.DOCKER_USERNAME }}/dotnet-app:latest"
          # Stop and remove the existing container if it exists
          if [ $(docker ps -q -f name=dotnet-app) ]; then
            echo "Stopping the existing container"
            docker stop dotnet-app
            docker rm dotnet-app
          fi
          # Run the new container with the .env file
          docker run --env-file /home/${{ secrets.EC2_USERNAME }}/.env -p 8080:8080 -d --name dotnet-app "${{ secrets.DOCKER_USERNAME }}/dotnet-app:latest"
